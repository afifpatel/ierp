{"version":3,"sources":["../server/issue.js"],"names":["validIssueStatus","New","Open","Assigned","Fixed","Verified","Closed","issueFieldType","status","owner","effort","created","completionDate","title","name","nationality","staff_code_type","staff_code_number","department","designation","dob","doj","salary","basic","hra","fa","sa","other","validateIssue","issue","field","type","validateInput","data","errors","isNull","username","password","isValid","convertIssue","Date","cleanupIssue","cleanedUpIssue","Object","keys","forEach"],"mappings":"AAAA;;;;;;AACA;;;;AACA;;;;;;AAEA,MAAMA,mBAAmB;AACrBC,SAAK,IADgB;AAErBC,UAAM,IAFe;AAGrBC,cAAU,IAHW;AAIrBC,WAAO,IAJc;AAKrBC,cAAU,IALW;AAMrBC,YAAQ;AANa,CAAzB;;AASA,MAAMC,iBAAiB;AACnBC,YAAQ,UADW;AAEnBC,WAAO,UAFY;AAGnBC,YAAQ,UAHW;AAInBC,aAAS,UAJU;AAKnBC,oBAAgB,UALG;AAMnBC,WAAO,UANY;;AAQnBC,UAAM,UARa;AASnBC,iBAAa,UATM;AAUnBC,qBAAiB,UAVE,EAUUC,mBAAmB,UAV7B;AAWnBC,gBAAY,UAXO,EAWKC,aAAa,UAXlB;AAYnB;AACAC,SAAK,UAbc,EAaFC,KAAK,UAbH;AAcnBC,YAAO;AACHC,eAAO,UADJ;AAEHC,aAAK,UAFF;AAGHC,YAAI,UAHD;AAIHC,YAAI,UAJD;AAKHC,eAAO;AALJ;AAdY,CAAvB;;AAuBA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC1B,SAAI,MAAMC,KAAV,IAAmBD,KAAnB,EAA0B;AACtB,cAAME,OAAOxB,eAAeuB,KAAf,CAAb;AACJ,YAAG,CAACC,IAAJ,EAAU;AACN,mBAAOF,MAAMC,KAAN,CAAP;AACH,SAFD,MAEO,IAAKC,QAAQ,UAAR,IAAsB,CAACF,MAAMC,KAAN,CAA5B,EAAyC;AAC5C,mBAAQ,GAAEA,KAAM,eAAhB;AACH;AACJ;;AAED;AACA;;AAEA;AAEC;;AAED,SAASE,aAAT,CAAuBC,IAAvB,EAA4B;AACxB,QAAIC,SAAS,EAAb;;AAEA,QAAG,oBAAUC,MAAV,CAAiBF,KAAKG,QAAtB,CAAH,EAAoC;AAChCF,eAAOE,QAAP,GAAkB,sBAAlB;AACH;;AAED,QAAG,oBAAUD,MAAV,CAAiBF,KAAKI,QAAtB,CAAH,EAAoC;AAChCH,eAAOG,QAAP,GAAkB,sBAAlB;AACH;;AAED,WAAO;AACHH,sBADG;AAEHI,iBAAU,uBAAQJ,MAAR;AAFP,KAAP;AAIH;;AAED,SAASK,YAAT,CAAsBV,KAAtB,EAA6B;AACzB,QAAGA,MAAMlB,OAAT,EAAkBkB,MAAMlB,OAAN,GAAgB,IAAI6B,IAAJ,CAASX,MAAMlB,OAAf,CAAhB;AAClB,QAAGkB,MAAMjB,cAAT,EAAyBiB,MAAMjB,cAAN,GAAuB,IAAI4B,IAAJ,CAASX,MAAMjB,cAAf,CAAvB;AACzB,WAAO6B,aAAaZ,KAAb,CAAP;AACH;;AAED,SAASY,YAAT,CAAsBZ,KAAtB,EAA6B;AAC3B,UAAMa,iBAAiB,EAAvB;AACAC,WAAOC,IAAP,CAAYf,KAAZ,EAAmBgB,OAAnB,CAA2Bf,SAAS;AAClC,YAAIvB,eAAeuB,KAAf,CAAJ,EAA2BY,eAAeZ,KAAf,IAAwBD,MAAMC,KAAN,CAAxB;AAC5B,KAFD;AAGF;AACE,WAAOY,cAAP;AAED;;AAED;AACA;AACA;;kBAEe,EAA+B;AAC1Cd,gCADW;AAEXa,8BAFW;AAGXF,8BAHW;AAIXP;AAJW,C","file":"issue.js","sourcesContent":["'use strict';\nimport Validator from 'validator';\nimport isEmpty from 'lodash/isEmpty';\n\nconst validIssueStatus = {\n    New: true,\n    Open: true,\n    Assigned: true,\n    Fixed: true,\n    Verified: true,\n    Closed: true,\n    };\n\nconst issueFieldType = {\n    status: 'required',\n    owner: 'required',\n    effort: 'optional',\n    created: 'required',\n    completionDate: 'optional',\n    title: 'required',\n\n    name: 'required', \n    nationality: 'optional',\n    staff_code_type: 'required', staff_code_number: 'required',\n    department: 'required', designation: 'required', \n    // reporting: 'required',\n    dob: 'required', doj: 'required',\n    salary:{\n        basic: 'required',\n        hra: 'optional',\n        fa: 'optional',\n        sa: 'optional',\n        other: 'optional',\n    },\n    };\n\nfunction validateIssue(issue) {\n    for(const field in issue ){\n        const type = issueFieldType[field];\n    if(!type) {\n        delete issue[field];\n    } else if ( type == 'required' && !issue[field]){\n        return `${field} is required.`;\n    }\n}\n\n// if(!validIssueStatus[issue.status])\n//     return `${issue.status} is not a valid status.`;\n\n// return null;\n\n}\n\nfunction validateInput(data){\n    let errors = {}\n\n    if(Validator.isNull(data.username)) {\n        errors.username = 'Username is required'\n    }\n\n    if(Validator.isNull(data.password)) {\n        errors.password = 'Password is required'\n    }\n\n    return {\n        errors,\n        isValid : isEmpty(errors)\n    }\n}\n\nfunction convertIssue(issue) {\n    if(issue.created) issue.created = new Date(issue.created);\n    if(issue.completionDate) issue.completionDate = new Date(issue.completionDate);\n    return cleanupIssue(issue);\n}\n\nfunction cleanupIssue(issue) {\n  const cleanedUpIssue = {};\n  Object.keys(issue).forEach(field => {\n    if (issueFieldType[field]) cleanedUpIssue[field] = issue[field];\n  });\n//   console.log(\"issue list returned issue =>\",issue);\n  return cleanedUpIssue;\n\n}\n\n// module.exports = {\n//     validateIssue : validateIssue\n// };\n\nexport default {                              //ES2015\n    validateIssue,\n    cleanupIssue,\n    convertIssue,\n    validateInput\n};\n\n\n"]}